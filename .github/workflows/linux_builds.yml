name: 🐧 Linux Builds
on:
  workflow_call:

# Global Settings
env:
  SCONS_FLAGS: >-
    module_mono_enabled=yes
    precision=double
  GODOT_CPP_BRANCH: 4.5
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-linux:
    # Stay one LTS before latest to increase portability of Linux artifacts.
    runs-on: ubuntu-22.04
    name: ${{ matrix.name }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor w/ Mono (target=editor)
            cache-name: linux-editor-mono-double
            target: editor
            bin: ./bin/godot.linuxbsd.editor.double.x86_64.mono
            doc-test: true
            proj-conv: true
            api-compat: true
            artifact: true
            # Validate godot-cpp compatibility on one arbitrary editor build.
            godot-cpp: true

          - name: Template w/ Mono, release (target=template_release)
            cache-name: linux-template-mono
            target: template_release
            bin: ./bin/godot.linuxbsd.template_release.double.x86_64.mono
            artifact: true

          - name: Template w/ Mono, debug (target=template_debug)
            cache-name: linux-template-mono-debug
            target: template_debug
            bin: ./bin/godot.linuxbsd.template_debug.double.x86_64.mono
            artifact: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'godotengine/godot'
          ref: '4.5-stable'
          submodules: recursive

      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libwayland-bin  # TODO: Figure out somehow how to embed this one.
          if [ "${{ matrix.proj-test }}" == "true" ]; then
            sudo apt-get install mesa-vulkan-drivers
          fi

      - name: Free disk space on runner
        run: |
          echo "Disk usage before:" && df -h
          sudo rm -rf /usr/local/lib/android
          echo "Disk usage after:" && df -h

      - name: Setup Python and SCons
        if: "!matrix.legacy-scons"
        uses: ./.github/actions/godot-deps

      - name: Setup Python and SCons (legacy versions)
        if: matrix.legacy-scons
        uses: ./.github/actions/godot-deps
        with:
          # Sync with Ensure*Version in SConstruct.
          python-version: 3.8
          scons-version: 4.0

      - name: Force remove preinstalled .NET SDKs
        run: |
          sudo rm -rf /usr/share/dotnet/*

      - name: Setup older .NET SDK as baseline
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: retry install dotnet 8
        run: |
          sudo apt --reinstall install dotnet8
          sudo apt --reinstall install dotnet-sdk-8.0

      - name: Download pre-built AccessKit
        uses: dsaltares/fetch-gh-release-asset@1.1.2
        with:
          repo: AccessKit/accesskit-c
          version: tags/0.17.0
          file: accesskit-c-0.17.0.zip
          target: accesskit-c-0.17.0/accesskit_c.zip

      - name: Extract pre-built AccessKit
        run: unzip -o accesskit-c-0.17.0/accesskit_c.zip

      - name: Install mold linker
        if: matrix.proj-test
        uses: rui314/setup-mold@v1

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          scons-flags: ${{ env.SCONS_FLAGS }} ${{ matrix.scons-flags }}
          platform: linuxbsd
          target: ${{ matrix.target }}

      # - name: Compilation (godot-cpp)
      #   uses: ./.github/actions/godot-cpp-build
      #   if: matrix.godot-cpp
      #   with:
      #     bin: ${{ matrix.bin }}
      #     scons-flags: target=template_debug dev_build=yes verbose=yes
      #     godot-cpp-branch: ${{ env.GODOT_CPP_BRANCH }}

      - name: Generate C# glue
        run: |
          ${{ matrix.bin }} --headless --generate-mono-glue ./modules/mono/glue

      - name: Build .NET solutions
        run: |
          dotnet --info
          ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=linuxbsd --werror

      - name: Prepare artifact
        if: matrix.artifact
        run: |
          strip bin/godot.*
          chmod +x bin/godot.*

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        if: matrix.artifact
        with:
          name: ${{ matrix.cache-name }}

      # - name: Unit tests
      #   run: |
      #     ls bin/
      #     ${{ matrix.bin }} --version
      #     ${{ matrix.bin }} --help
      #     ${{ matrix.bin }} --headless --test --force-colors

      - name: .NET source generators tests
        run: |
          dotnet test modules/mono/editor/Godot.NET.Sdk/Godot.SourceGenerators.Tests

      # Check class reference
      - name: Check for class reference updates
        if: matrix.doc-test
        run: |
          echo "Running --doctool to see if this changes the public API without updating the documentation."
          echo -e "If a diff is shown, it means that your code/doc changes are incomplete and you should update the class reference with --doctool.\n\n"
          ${{ matrix.bin }} --doctool --headless 2>&1 > /dev/null || true
          git diff --color --exit-code && ! git ls-files --others --exclude-standard | sed -e 's/^/New doc file missing in PR: /' | grep 'xml$'

      # Check API backwards compatibility
      - name: Check for GDExtension compatibility
        if: matrix.api-compat
        run: |
          ./misc/scripts/validate_extension_api.sh "${{ matrix.bin }}"

      # Download and run the test project
      - name: Test Godot project
        uses: ./.github/actions/godot-project-test
        if: matrix.proj-test
        with:
          bin: ${{ matrix.bin }}

      # Test the project converter
      - name: Test project converter
        uses: ./.github/actions/godot-converter-test
        if: matrix.proj-conv
        with:
          bin: ${{ matrix.bin }}